@page "/test"
@using System.Diagnostics;
@using System.ComponentModel;
@implements IDisposable;




<select @onchange="FlightChanged">
    @foreach (var flight in FlightData.Flights.FindAll(f => f.Planned.Date == selectedDate.Date))
    {
        <option value="@flight.Rute">@flight.ArrivalAirport</option>
    }
</select>


    @code {
        string? value = "NULL";
    public Timer timer;
    string RuteString;

    Flight SelectedFlight;
    DateTime selectedDate = DateTime.UtcNow.Subtract(TimeSpan.FromHours(3)).AddDays(1);
    string roomString;
    InputDate<DateTime> help = new InputDate<DateTime>();

    protected async override void OnInitialized()
    {
        timer = new Timer(UpdatePage, null, 0, 20);


        string title = "Getting Data";
        if(FlightData.Flights.Count == 0)
        {
            Console.WriteLine(FlightData.Flights.Count.ToString());
            await FlightData.GetFlights();
            InvokeAsync(StateHasChanged);

        }

        SelectedFlight = FlightData.Flights.First(f => f.Planned.Date == selectedDate.Date);
        RuteString = SelectedFlight.Rute;


    }



    void FlightChanged(ChangeEventArgs args)
    {

        SelectedFlight = FlightData.Flights.Find(f => f.Planned.Date == selectedDate.Date && f.Rute == args.Value.ToString());
        

    }

    void DateChanged(ChangeEventArgs args)
    {
        selectedDate = DateTime.Parse(args.Value.ToString());
        Console.WriteLine(selectedDate.ToShortDateString());
    }



    void UpdatePage(object _)
    {
        if(SelectedFlight != null)
        {
            //Console.WriteLine(SelectedFlight.ArrivalAirport);
        }
        

        InvokeAsync(StateHasChanged);
    }

    

    public void Dispose()
    {
        timer.Dispose();
    }

    

}





