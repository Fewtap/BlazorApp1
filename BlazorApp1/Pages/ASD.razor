@page "/test"
@using Microsoft.AspNetCore.Components
@using FlightData;
@using Syncfusion.Blazor;
@implements IDisposable;


<input type="date" @onchange="DateChanged" value="@_selectedDate.ToString("yyyy-MM-dd")"/>

<select @onchange="FlightChanged">
    @if(flights != null)
    {
        foreach (var flight in flights.FindAll(f => f.Planned.Date == _selectedDate.Date))
        {
            <option value="@flight.Rute">@flight.ArrivalAirport</option>
        }
    }
    
</select>


<input type="text" @bind="InputValue" @oninput="UpdateInputValue" @onkeydown="SubmitEvent" placeholder="Enter room numbers, separated by commas"/>




@code {
    string InputValue = "";

    void UpdateInputValue(ChangeEventArgs e)
    {
    // Update the InputValue property with the latest input value
        InputValue = e.Value.ToString();
    }
    
    void SubmitEvent(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrEmpty(InputValue))
        {
			var rooms = InputValue.Split(',').Select(r => r.Trim()).ToList();
			var flight = flights.Find(f => f.FlightHash == _selectedFlight.FlightHash);
			
			InputValue = "";
		}

    // Update the component to reflect the changes
            InvokeAsync(StateHasChanged);


            
        }
    }


}






@code {

    public Timer timer;
    string _ruteString = "";
    DateTime _selectedDate = DateTime.Now;
    Flight _selectedFlight = new();
    List<Flight> flights = null!;
    FlightDB flightDB = new();
    string _roomString;
    InputDate<DateTime> help = new();

    protected override async void OnInitialized()
    {
        flights = await FlightDB.GetFlights();
        timer = new Timer(UpdatePage, null, 0, 20);
        _selectedDate = DateTime.UtcNow.Subtract(TimeSpan.FromHours(3)).AddDays(1);

        var title = "Getting Data";



        

        InvokeAsync(StateHasChanged);
        

        _selectedFlight = flights.First(f => f.Planned.Date == _selectedDate.Date);
        _ruteString = _selectedFlight.Rute;
        if (_selectedFlight != null)
        {
            Console.WriteLine(_selectedFlight.Rute + " " + _selectedFlight.ArrivalAirport);
        }
    }


    void FlightChanged(ChangeEventArgs args)
    {
        _selectedFlight = flights.Find(f => f.Planned.Date == _selectedDate.Date && f.Rute == args.Value.ToString());
        if (_selectedFlight != null)
        {
            Console.WriteLine(_selectedFlight.Rute + " " + _selectedFlight.ArrivalAirport);
        }
    }

    void DateChanged(ChangeEventArgs args)
    {
        _selectedDate = DateTime.Parse(args.Value.ToString());
        _selectedFlight = flights.First(f => f.Planned.Date == _selectedDate.Date);
        Console.WriteLine(_selectedDate.ToShortDateString());
        if (_selectedFlight != null)
        {
            Console.WriteLine(_selectedFlight.Rute + " " + _selectedFlight.ArrivalAirport);
        }
    }


    void UpdatePage(object _)
    {
        if (_selectedFlight != null)
        {
    //Console.WriteLine(SelectedFlight.ArrivalAirport);
        }


        InvokeAsync(StateHasChanged);
    }


    public void Dispose()
    {
        timer.Dispose();
    }



}