@using System.Threading;
@using FlightData;
@using Syncfusion.Blazor.Diagrams
@implements IDisposable

@page "/"


<PageTitle>Index</PageTitle>


	<h1 style="text-align:center; margin:20px; padding-top:200px;">Departures  @_timeString</h1>

<table style="margin-left:auto; margin-right:auto;">
    <thead>
        <tr style="text-align: inherit;">
            <th class="headerTitle">Route</th>
            <th class="headerTitle">Destination</th>
            <th class="headerTitle">Planned</th>
            <th class="headerTitle">Estimated</th>
            <th class="headerTitle">Status</th> 
            <th class="headerTitle">Bus Departure</th>
        </tr>
    </thead>
    <tbody>

        @{
            if (flights != null)
            {

                DateTime greenlandTime = TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.UtcNow, "Greenland Standard Time");
                if (flights.Exists(f => f.Planned.Day == greenlandTime.Day && f.Planned.TimeOfDay > greenlandTime.TimeOfDay))
                {
                    foreach (var flight in flights)
                    {
                        if (flight.Planned.Date > DateTime.Now.AddHours(-3).Date)
                        {
                            continue;
                        }
                        if (flight.Planned.Subtract(TimeSpan.FromMinutes(90)) < DateTime.Now.AddHours(-3))
                        {
                            if (flight.Estimated != null)
                            {
                                DateTime estimated = (DateTime)flight.Estimated;
                                if (estimated.Subtract(TimeSpan.FromMinutes(90)) < DateTime.Now.AddHours(-3))
                                {
                                    continue;
                                }
                            }
                            else
                            {
                                continue;
                            }
                        }
                        DateTime estimatedDate;
                        string estimatedString;

                        if (flight.Estimated != null)
                        {

                        }
                        <tr style="text-align: inherit;">
                            <td class="rowElements">@flight.Rute</td>
                            <td class="rowElements">@flight.ArrivalAirport</td>
                            <td class="rowElements">@flight.Planned.ToShortTimeString()</td>
                            @if (flight.Estimated == null)
                            {
                                <th class="rowElements">@flight.Estimated</th>
                            }
                            else
                            {
                                estimatedDate = (DateTime)flight.Estimated;
                                estimatedString = estimatedDate.ToShortTimeString();
                                <td class="rowElements">@estimatedString</td>
                            }
                            <td class="rowElements">@flight.StatusEn</td>
                            @if (flight.Estimated != null)
                            {
                                estimatedDate = (DateTime)flight.Estimated;
                                <td class="rowElements">@estimatedDate.Subtract(TimeSpan.FromMinutes(90)).ToShortTimeString()</td>
                            }
                            else
                            {
                                <td class="rowElements">@flight.Planned.Subtract(TimeSpan.FromMinutes(90)).ToShortTimeString()</td>
                            }
                        </tr>

                    }
                }
            }
        }

    
            
    
        
    </tbody>
</table>

<!--<iframe style="padding-top:50px; margin-left:auto; margin-right:auto; display:block;" height="650" width="900"src="https://embed.windy.com/embed2.html?lat=67.776&lon=-51.196&detailLat=69.225&detailLon=-51.416&width=900&height=900&zoom=5&level=surface&overlay=temp&product=ecmwf&menu=&message=&marker=true&calendar=12&pressure=&type=map&location=coordinates&detail=true&metricWind=m%2Fs&metricTemp=default&radarRange=-1" frameborder="0"></iframe>-->


@code {
    string _timeString = DateTime.Now.AddHours(-3).ToLongTimeString();
    Timer _showTimeTimer = null!;
    Timer? _updateFlightsTimer;
    List<Flight> flights = null!;

    //Write a fucntion that returns a Flight object

    protected override async void OnInitialized()
    {
        _showTimeTimer = new Timer(UpdateTime!, null, 0, 1000);
        _updateFlightsTimer = new Timer(UpdateFlights!, null, 0, 1000);
        while (FlightDB.IsGettingData)
        {
            await Task.Delay(100);
            flights = await FlightDB.GetFlights(DateTime.Now.AddHours(-3));



        }
    }

    void UpdateTime(object _)
        {
            DateTime greenlandTime;
            greenlandTime = TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.UtcNow, "Greenland Standard Time");
            _timeString = greenlandTime.ToLongTimeString();

            InvokeAsync(StateHasChanged);
        }

        int i = 0;
        List<Flight>? newFlights;

        async void UpdateFlights(object _)
        {
             if(FlightDB.IsGettingData)
            {
                return;
                
            }
            newFlights = await FlightDB.GetFlights(DateTime.Now.AddHours(-3));

            if (newFlights != null)
            {
                flights = newFlights;
            }





        }

        public void Dispose()
        {
            _showTimeTimer.Dispose();
            _updateFlightsTimer.Dispose();
        }


    

}
