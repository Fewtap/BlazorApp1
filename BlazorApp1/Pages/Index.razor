@using System.Threading;
@using Newtonsoft.Json;
@using RestSharp;

@implements IDisposable

@page "/"


<PageTitle>Index</PageTitle>


	<h1 style="text-align:center; margin:20px; padding-top:200px;">Departures  @timeString</h1>

<table width="600" style="margin-left:auto; margin-right:auto;">
    <thead>
        <tr style="text-align: inherit;">
            <th class="headerTitle">Route</th>
            <th class="headerTitle">Destination</th>
            <th class="headerTitle">Planned</th>
            <th class="headerTitle">Estimated</th>
            <th class="headerTitle">Status</th> 
            <th class="headerTitle">Bus Departure</th>
        </tr>
    </thead>
    <tbody>

        @{
            if (FlightData.Flights != null)
            {
                if (FlightData.Flights.Exists(f => f.Planned.Day == DateTime.Now.Day && f.Planned.TimeOfDay > DateTime.Now.Subtract(Timespan.FromHours(3)));
                {
                    foreach (var flight in FlightData.Flights)
                    {
                        if (flight.Planned.Date > DateTime.Now.Date)
                        {
                            continue;
                        }
                        if (flight.Planned.Subtract(TimeSpan.FromMinutes(90)) < DateTime.Now.Subtract(TimeSpan.FromHours(3)))
                        {
                            if (flight.Estimated != null)
                            {
                                DateTime estimated = (DateTime)flight.Estimated;
                                if (estimated.Subtract(TimeSpan.FromMinutes(90)) < DateTime.Now.Subtract(TimeSpan.FromHours(3)))
                                {
                                    continue;
                                }
                            }
                            else
                            {
                                continue;
                            }
                        }
                        DateTime estimatedDate;
                        string estimatedString;

                        if (flight.Estimated != null)
                        {

                        }
                        <tr style="text-align: inherit;">
                            <td class="rowElements">@flight.Rute</td>
                            <td class="rowElements">@flight.ArrivalAirport</td>
                            <td class="rowElements">@flight.Planned.ToShortTimeString()</td>
                            @if (flight.Estimated == null)
                            {
                                <th class="rowElements">@flight.Estimated</th>
                            }
                            else
                            {
                                estimatedDate = (DateTime)flight.Estimated;
                                estimatedString = estimatedDate.ToShortTimeString();
                                <td class="rowElements">@estimatedString</td>
                            }
                            <td class="rowElements">@flight.Status.en</td>
                            @if (flight.Estimated != null)
                            {
                                estimatedDate = (DateTime)flight.Estimated;
                                <td class="rowElements">@estimatedDate.Subtract(TimeSpan.FromMinutes(90)).ToShortTimeString()</td>
                            }
                            else
                            {
                                <td class="rowElements">@flight.Planned.Subtract(TimeSpan.FromMinutes(90)).ToShortTimeString()</td>
                            }
                        </tr>

                    }
                }
                else
                {
                    var tomorrowsFlights = FlightData.Flights.FindAll(f => f.Planned.Day > DateTime.Now.Day);

                    foreach (var flight in tomorrowsFlights)
                    {


                        DateTime estimatedDate;
                        string estimatedString;

                        if (flight.Estimated != null)
                        {

                        }
                        <tr style="text-align: inherit;">
                            <th class="rowElements">@flight.Rute</th>
                            <th class="rowElements">@flight.ArrivalAirport</th>
                            <th class="rowElements">@flight.Planned.ToLongDateString()</th>
                            @if (flight.Estimated == null)
                            {
                                <th class="rowElements">@flight.Estimated</th>
                            }
                            else
                            {
                                estimatedDate = (DateTime)flight.Estimated;
                                estimatedString = estimatedDate.ToShortTimeString();
                                <th class="rowElements">@estimatedString</th>
                            }
                            <th class="rowElements">@flight.Status.en</th>
                            @if (flight.Estimated != null)
                            {
                                estimatedDate = (DateTime)flight.Estimated;
                                <th class="rowElements">@estimatedDate.Subtract(TimeSpan.FromMinutes(90)).ToShortTimeString()</th>
                            }
                            else
                            {
                                <th class="rowElements">@flight.Planned.Subtract(TimeSpan.FromMinutes(90)).ToShortTimeString()</th>
                            }
                        </tr>
                    }
                }

            }
            
    }
        
    </tbody>
</table>

<iframe style="padding-top:50px; margin-left:auto; margin-right:auto; display:block;" height="650" width="900"src="https://embed.windy.com/embed2.html?lat=67.776&lon=-51.196&detailLat=69.225&detailLon=-51.416&width=900&height=900&zoom=5&level=surface&overlay=temp&product=ecmwf&menu=&message=&marker=true&calendar=12&pressure=&type=map&location=coordinates&detail=true&metricWind=m%2Fs&metricTemp=default&radarRange=-1" frameborder="0"></iframe>


@code {
    string timeString = DateTime.Now.ToLongTimeString();
    Timer ShowTimeTimer;
    Timer UpdateFlightsTimer;

    public int i = 0;

    protected override void OnInitialized()
    {
        ShowTimeTimer = new Timer(UpdateTime, null, 0, 1);
        UpdateFlightsTimer = new Timer(UpdateFlights, null, 0, 300000);




    }

    void UpdateTime(object _)
    {
        timeString = DateTime.UtcNow.Subtract(TimeSpan.FromHours(3)).ToLongTimeString();

        InvokeAsync(StateHasChanged);
    }

    async void UpdateFlights(object _)
    {
        
        await FlightData.GetFlights();





    }

    public void Dispose()
    {
        ShowTimeTimer.Dispose();
        UpdateFlightsTimer.Dispose();
    }

    
}

    